/**
 * todo: add description
 *
 * @author Serge Pruteanu
 */
//def scriptContext = context(scope: scriptScope(name: 'test-vd.groovy'))
def scriptContext = context(ctype: "groovy.lang.Script")
contributor(scriptContext) {
    delegatesTo(findClass("org.prismus.scrambler.builder.ValueDefinition"))
//    ValueDefinition.methods.each { meth ->
//        method name: meth.name, type: meth.returnType
//    }
}

//contributor(ctype: hasField(hasAnnotation('groovy.beans.ListenerList'))) {
//    for (PsiField field : psiClass?.fields?.grep {it.hasAnnotation('groovy.beans.ListenerList')}) {
//        def fieldType = field.type
//        if (!(fieldType instanceof PsiClassType)) {
//            continue
//        }
//
//        def type = fieldType.parameters ? fieldType.parameters[0] : null
//        if (!type) return
//        String typeClassName = type.className
//        method name: 'add' + typeClassName, type: void, params: [listener: typeClassName]
//        method name: 'remove' + typeClassName, type: void, params: [listener: typeClassName]
//        method name: 'get' + typeClassName + 's', type: typeClassName + '[]'
//
//        for (PsiMethod m : findClass(type.getDeepComponentType().canonicalText).getMethods()) {
//            if (m == null) continue
//            String methodName = m.getName()
//            methodName = capitalize(methodName[0])
//            Map params = [:]
//            for (PsiParameter param : m.parameterList.parameters) {
//                String paramName = param.typeElement.text
//                paramName = uncapitalize(paramName[0])
//                params[paramName] = param.type.getDeepComponentType().canonicalText
//            }
//
//            method name: 'fire' + methodName, type: 'void', params: params
//        }
//    }
//}
